// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlgen

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type OrderStatus string

const (
	OrderStatusPending   OrderStatus = "pending"
	OrderStatusCompleted OrderStatus = "completed"
	OrderStatusCancelled OrderStatus = "cancelled"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus
	Valid       bool // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type Category struct {
	ID       int16
	Name     string
	Price    int32
	Quantity int32
	MaxRow   int32
	MaxCol   int32
}

type CategoryQuantity struct {
	ID         int32
	CategoryID int16
	Row        int32
	Col        int32
}

type Order struct {
	ID          int32
	CategoryID  int16
	ExternalID  string
	Name        string
	Email       string
	Phone       string
	Status      NullOrderStatus
	PaymentCode string
	ExpiredAt   pgtype.Timestamp
	TicketRow   pgtype.Int4
	TicketCol   pgtype.Int4
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}
